# Упражнение 67. Найти периметр многоугольника
#
# Напишите программу для расчета периметра заданного многоугольника.
#
# Начните с запроса у пользователя координат x и y первой точки много-
# угольника. Продолжайте запрашивать координаты следующих точек фи-
# гуры, пока пользователь не оставит строку ввода координаты по оси x
# пустой. После ввода каждой пары значений вы должны вычислить длину
# очередной стороны многоугольника и прибавить полученное значение
# к будущему ответу. По окончании ввода необходимо вычислить расстоя-
# ние от последней введенной точки до первой, чтобы замкнуть фигуру,
# и вывести итоговый результат. Пример ввода координат точек много-
# угольника и вывода периметра показан ниже. Введенные пользователем
# значения выделены жирным.
#
# Введите первую координату X: 0
# Введите первую координату Y: 0
# Введите следующую координату X (Enter для окончания ввода): 1
# Введите следующую координату Y: 0
# Введите следующую координату X (Enter для окончания ввода): 0
# Введите следующую координату Y: 1
# Введите следующую координату X (Enter для окончания ввода):
# Периметр многоугольника равен 3.414213562373095

import math


points = []
length = []

x = int(input("Введите первую координату X: "))
y = int(input("Введите первую координату Y: "))
points.append([x, y])

while True:
    x = input("Введите следующую координату X (Enter для окончания ввода): ")
    if x:
        x = int(x)
        y = int(input("Введите следующую координату Y: "))
        points.append([x, y])
    else:
        break

for i, curr_point in enumerate(points):
    # print(i, point)
    if i == (len(points) - 1):
        next_point = points[0]
    else:
        next_point = points[i+1]
    length.append(math.sqrt( (next_point[0] - curr_point[0])**2 + (next_point[1] - curr_point[1])**2 ))

print(f"Периметр многоугольника: {sum(length)}")